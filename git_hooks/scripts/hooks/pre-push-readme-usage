#!/bin/sh
# Automatically update README ## Usage
# shellcheck disable=SC2059 # do not use variables in the printf format string.
## shellcheck disable=SC2034 # appears unused


# if any command inside script returns error, exit and return that error
#set -e

program_name='matrix'
msg='readme usage updated.'

# colors example
# printf "%s\n" "Text in ${red}red${end}, white and ${blu}blue${end}."
red="\033[1;31m"
grn="\033[1;32m"
yel="\033[1;33m"
blu="\033[1;34m"
mag="\033[1;35m"
cyn="\033[1;36m"
end="\033[0m"

get_git_root_dir() {
    gitdir=$(git rev-parse --show-toplevel)
    [ -d "$gitdir" ] || exit 3
    echo "$gitdir"
}

edit_readme_usage() {
    grd=$(get_git_root_dir)
    cd "$grd" || exit 2
    grd_files=$(find "$grd" -maxdepth 1 -type f -printf '%f\n')
    README_NAME=$(echo "$grd_files" | grep -i readme | head -n1)
    PROGRAM_NAME=$(echo "$grd_files" | grep -i "$program_name" | head -n1)
    # output help and replace all tabs in temp file with 4 spaces
    COMMAND_OUT=$("./$PROGRAM_NAME" -h | expand -t4)
    tmp_file="/tmp/readme_usage.txt"
    echo "$COMMAND_OUT" > "$tmp_file"
    # skip over the lines with /n and delete in between
    sed -i '
        /## Usage/,/```$/ {
            /## Usage/n
            /```/!d
        }
    ' "$README_NAME"
    # append text from a file after the pattern
    sed -i '
        /## Usage/,/```$/ {
            /```..*/r '"${tmp_file}"'
        }
    ' "$README_NAME"
    # remove temp file at the end
    rm -rf "$tmp_file"
    # show message
    printf "${cyn}...HOOK...${end}${yel}${0}:${end} ${msg}\n"
}

check_readme_modification() {
    # cancel push if README_NAME has not staged changes
    if git status --porcelain | grep -iq "$README_NAME"; then
        printf "${red}ABORT ${README_NAME} has not staged changes.${end}\n"
        printf "${cyn}Stage ${README_NAME}${end} and add it to commit first.${end}\n"
        exit 1 # if you remove this line then it won't block push
    fi
}

grd=$(get_git_root_dir) # check if git dir
branch="$(git rev-parse --abbrev-ref HEAD)"
# a branch name where you want to prevent git push. In this case, it's "master"
if [ "$branch" = master ]; then
    # DO THINGS HERE
    edit_readme_usage
    check_readme_modification
fi
# At the end of a file there should be 'exit 0', if so git could push.

exit 0
