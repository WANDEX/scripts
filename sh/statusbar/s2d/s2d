#!/bin/sh
# get color or drawing by name and output as simple string

abs_dir_path="$(dirname "$(realpath "$0")")"
cpath="$abs_dir_path/.colors"
dpath="$abs_dir_path/.drawings"
[ ! -f "$cpath" ] && printf "%s: %s\n%s\n" "ERROR & EXIT" "not found file:" "$cpath" && exit 1
[ ! -f "$dpath" ] && printf "%s: %s\n%s\n" "ERROR & EXIT" "not found file:" "$dpath" && exit 1

# read into variable using 'Here Document' code block
read -r -d '' USAGE <<- EOF
Usage: $(basename "$0") [OPTION...]
OPTIONS
    -c, --color     Get color by name
    -d, --draw      Get drawing by name
    -h, --help      Display help
    -H, --memo      Display S2D MEMO
    -l, --list      List all/color/drawing names (takes:[ a/c/d ])
    -p, --prefix    Add prefix string to output
    -P, --postfix   Add postfix string to output
    --battery       Dynamic battery drawing
EOF

# read into variable using 'Here Document' code block
read -r -d '' S2D_MEMO <<- EOF
${BLD}S2D MEMO:${END}
^rx,y,w,h^  Draw a rectangle of width w and height h,
            with its top left corner at (x,y) relative the X drawing cursor.
^c#FF0000^  Set foreground color.
^b#55cdfc^  Set background color, only applies to text,
            use the ^r^ command to change the background while drawing.
^f<px>^     Forward the X drawing cursor by <px> pixel.
            Please bear in mind that you have to move the cursor enough
            to display your drawing (by the with of your drawing).
^d^         Reset colors to SchemeNorm.
^C<num>^    Set foreground color to terminal color 0-15.
^B<num>^    Set background color to terminal color 0-15.
^w^         Swaps the current foreground/background colors.
            Useful when drawing multiple rectangles on top of one another.
^v^         Save current color scheme to restore it later with the ^t^ tag.
^t^         Restores the last color scheme saved by the ^v^ tag.
EOF

clean_content() {
    # remove everything after // characters and empty lines with/without spaces
    sed "s/[[:space:]]*\/\/.*$//g; /^[[:space:]]*$/d" "$1"
}

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=c:d:hHl:p:P:
    LONG=color:,draw:,help,list:,memo,prefix:,postfix:,battery:
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -c|--color)
            shift
            color="$1"
            cc=$(clean_content "$cpath")
            out_c=$(echo "$cc" | awk "/$color/"' {print $NF}') # last column
            ;;
        -d|--draw)
            shift
            draw="$1"
            cc=$(clean_content "$dpath")
            out_d=$(echo "$cc" | grep "$draw") # TODO unfinished
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -H|--memo)
            echo "$S2D_MEMO"
            exit 0
            ;;
        -l|--list)
            shift
            ccc=$(clean_content "$cpath" | awk '{$NF=""}1') # all columns except last
            ccd=$(clean_content "$dpath") # TODO unfinished
            case "$1" in
                c) echo "$ccc" ;;
                d) echo "$ccd" ;;
                *) echo "$ccc"; echo "$ccd" ;;
            esac
            exit 0
            ;;
        -p|--prefix)
            shift
            out_p="$1"
            ;;
        -P|--postfix)
            shift
            out_P="$1"
            ;;
        --battery)
            shift
            battery_level="$1" # XXX temporary from $1
            # TODO get actual battery level without $1
            monochrome=0
            use_term_colors=1
            if [ "$monochrome" -eq 0 ]; then
                if [ "$use_term_colors" -eq 1 ]; then
                    # use terminal colors
                    c1="C1" # red
                    c2="C2" # green
                    c3="C3" # yellow
                    c4="C4" # blue
                else
                    # use predefined colors
                    c1="$(s2d -p 'c' -c red)"    # red
                    c2="$(s2d -p 'c' -c green)"  # green
                    c3="$(s2d -p 'c' -c yellow)" # yellow
                    c4="$(s2d -p 'c' -c blue)"   # blue
                fi
            fi
            # divide battery level by 5 to get 20 battery drawing states
            level="$(echo "$battery_level/5" | bc)"
            # based on value of battery level variable:
            # - dynamic x,w to animate battery level drain
            # - dynamic remaining capacity fill color
            case "$level" in
                20) x=3  ; w=20 ; col_c="$c2" ;; # (100%)
                19) x=4  ; w=19 ; col_c="$c2" ;;
                18) x=5  ; w=18 ; col_c="$c2" ;;
                17) x=6  ; w=17 ; col_c="$c2" ;;
                16) x=7  ; w=16 ; col_c="$c2" ;;
                15) x=8  ; w=15 ; col_c="$c4" ;; # ( 75%)
                14) x=9  ; w=14 ; col_c="$c4" ;;
                13) x=10 ; w=13 ; col_c="$c4" ;;
                12) x=11 ; w=12 ; col_c="$c4" ;;
                11) x=12 ; w=11 ; col_c="$c4" ;;
                10) x=13 ; w=10 ; col_c="$c3" ;; # ( 50%)
                9)  x=14 ; w=9  ; col_c="$c3" ;;
                8)  x=15 ; w=8  ; col_c="$c3" ;;
                7)  x=16 ; w=7  ; col_c="$c3" ;;
                6)  x=17 ; w=6  ; col_c="$c3" ;;
                5)  x=18 ; w=5  ; col_c="$c1" ;; # ( 25%)
                4)  x=19 ; w=4  ; col_c="$c1" ;;
                3)  x=20 ; w=3  ; col_c="$c1" ;;
                2)  x=21 ; w=2  ; col_c="$c1" ;;
                1)  x=22 ; w=1  ; col_c="$c1" ;;
                0)  x=23 ; w=0  ; col_c="$c1" ;; # ( 0% )
                *)  exit 0 ;; # exit
            esac
            CC="${col_c:-"c#97A6AA"}" # color capacity
            CF="c${out_c:-"#000000"}" # color fill
            nose="^r00,06,02,04^" # Draw the nose
            batt="^r02,03,22,10^" # Draw the battery
            fill="^${CF}^^r03,04,20,08^" # Fill it so that the border stays
            cpct="^${CC}^^r$x,04,$w,08^" # Fill it with the remaining capacity
            reset="^d^^f24^" # Reset the colorscheme and forward the cursor
            # compose it all together
            composed="$(printf "%s%s%s%s%s" "$nose" "$batt" "$fill" "$cpct" "$reset")"
            # xsetroot -name "$composed" # XXX FOR TESTS ONLY!
            printf "%s" "$composed"
            exit 0
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

get_opt "$@"

# intentionally print all in one line
printf "%s" "$out_p"
printf "%s" "$out_c"
printf "%s" "$out_d"
printf "%s" "$out_P"
