#!/bin/sh
# get average crypto exchange rate for last ~5 min

CACHE="$CSCRDIR"'/rate'

# read into variable using 'Here Document' code block
read -d '' USAGE <<- EOF
Usage: $(basename $BASH_SOURCE) [OPTION...]
GENERAL OPTIONS
    -c, --convert   Convert and get sum of currencies, separated by (+/-) each
    -e, --exchange  Change exchange currency (default: usd)
    -n, --number    Number of currencies in a spreadsheet (default: 10)
    -t, --test      Activate url preview test mode
    -C, --color     Allow ANSI sequences for colored output, not only text data
OUTPUT ONLY OPTIONS
    -d, --delimiter Delimiter to use between coins (man echo -e sequences sup.)
    -f, --format    Format of output:
        %r rank | %c coin | %p price | %H ch24h | %h ch01h | %m mcap | %s spark
    AWK printf format fields:
        --Ar price | --Ap price | --Ah change | --Am mcap
    -o, --output    Get multiple coins data separated via ',' as a delimiter
        --Ec        Get colored emoji (unicode symbols) in ch24h & ch01h
HELP
    -h, --help      Display help
    -H, --help-full Display full help which obtained via curl
    --currencies    List of supported currencies with their full names
    --coins         List of supported cryptocurrencies with their full names
    --debug         Show debug messages
EXAMPLES
    $(basename $BASH_SOURCE) -c 1337usd -e eur
    $(basename $BASH_SOURCE) 1337usd to eur
    $(basename $BASH_SOURCE) 1337 usd in eur
    - Above examples are equal and are valid.
    $(basename $BASH_SOURCE) -c 1BTC-10ETH+100LTC
    $(basename $BASH_SOURCE) -o btc,eth,bch -f "%c:%p[%H]" -d '\\\n' -a '%8.3f'
EOF

def_opt() {
    awkf_h="%-3s"
    awkf_m="%3.0f"
    awkf_p="%3.0f"
    awkf_r="%2.0f"
    exchange="usd"
    format="%c:%p"
    delimiter=" "
    n_hardcoded_max=600 # current max available coins in table
    Ec=0
    color=0 # color mode 1=on
    debug=0 # debug mode 1=on
}

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=c:Cd:e:f:hHn:o:t
    LONG=Ah:,Am:,Ap:,Ar:,convert:,color,coins,currencies,debug,delimiter:,Ec,exchange:,format:,help,help-full,number:,output:,test
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -c|--convert)
            shift
            special="$1"
            ;;
        -C|--color)
            color=1
            ;;
        -d|--delimiter)
            shift
            delimiter="$1"
            ;;
        -e|--exchange)
            shift
            exchange="$1"
            ;;
        -f|--format)
            shift
            format="$1"
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -H|--help-full)
            echo "$USAGE"
            echo "THE FOLLOWING IS OBTAINED USING CURL (EVERY TIME)"
            special=":help"
            ;;
        -n|--number)
            shift
            case $1 in
                0*)
                    printf "$1\n^ unsupported number! exit.\n"
                    exit 1
                    ;;
                ''|*[!0-9]*)
                    printf "$1\n^ IS NOT A NUMBER OF INT! exit.\n"
                    exit 1
                    ;;
                *) n=$1 ;;
            esac
            [ $n -gt $n_hardcoded_max ] && n=$n_hardcoded_max
            ;;
        -o|--output)
            shift
            output="$1"
            ;;
        -t|--test)
            test=1
            ;;
        --Ah)
            shift
            awkf_h="$1"
            ;;
        --Am)
            shift
            awkf_m="$1"
            ;;
        --Ap)
            shift
            awkf_p="$1"
            ;;
        --Ar)
            shift
            awkf_r="$1"
            ;;
        --Ec)
            Ec=1
            ;;
        --coins)
            special=":coins"
            ;;
        --currencies)
            special=":currencies"
            ;;
        --debug)
            debug=1
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

parse_in() {
    def_opt # PLACE FOR OPTION DEFAULTS
    argarray=("$@")
    argcount="${#argarray[@]}"
    stringarray="${argarray[*]}"
    # substring: if first arg starts without '-'...
    if [[ "$stringarray" != -* && $argcount -eq 1 ]]; then
            special="${argarray[0]}"
            color=1 # allow colored output
    elif [[ "$stringarray" =~ " in " || "$stringarray" =~ " to " ]]; then
        if [[ $argcount -eq 3 ]]; then
            special="${argarray[0]}"
            exchange="${argarray[2]}"
        elif [[ $argcount -eq 4 ]]; then
            special="${argarray[0]}${argarray[1]}"
            exchange="${argarray[3]}"
        else
            echo "[$argcount]:args"
            echo "I don't get it. exit"
            exit 1
        fi
    else
        get_opt "$@"
    fi
}

get_defaults() {
    # essential defaults in order to work
    if [[ $color -eq 1 ]]; then
        num=${n:-10} # to get n coins or 10 default
        T='' # allow colored output
    else
        num=$n_hardcoded_max # to get all coins from table to parse
        T='T' # text only, no ANSI sequences
    fi
}

colored_change_emojis() {
    ch01h="$1"
    ch24h="$2"
    upW='🟩'
    dwW='🟥'
    upH='🟢'
    dwH='🔴'
    upN='▲ '
    dwN='▼ '
    upL='△ '
    dwL='▽ '
    cW=20
    cH=10
    cN=5

    # get only int number
    _24h=$(echo "$ch24h" | sed "s/+//; s/-//; s/%//" | xargs printf "%.*f\n" "0")
    _01h=$(echo "$ch01h" | sed "s/+//; s/-//; s/%//" | xargs printf "%.*f\n" "0")

    # 24
    if [[ $(($_24h)) -ge $cW ]]; then
        if [[ "$ch24h" == +* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/+/$upW/g")
        elif [[ "$ch24h" == -* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/-/$dwW/g")
        fi
    elif [[ $(($_24h)) -ge $cH ]]; then
        if [[ "$ch24h" == +* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/+/$upH/g")
        elif [[ "$ch24h" == -* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/-/$dwH/g")
        fi
    elif [[ $(($_24h)) -ge $cN ]]; then
        if [[ "$ch24h" == +* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/+/$upN/g")
        elif [[ "$ch24h" == -* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/-/$dwN/g")
        fi
    else
        if [[ "$ch24h" == +* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/+/$upL/g")
        elif [[ "$ch24h" == -* ]]; then
            ch24h=$(echo "$ch24h" | sed "s/-/$dwL/g")
        fi
    fi
    # 01
    if [[ $(($_01h)) -ge $cW ]]; then
        if [[ "$ch01h" == +* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/+/$upW/g")
        elif [[ "$ch01h" == -* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/-/$dwW/g")
        fi
    elif [[ $(($_01h)) -ge $cH ]]; then
        if [[ "$ch01h" == +* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/+/$upH/g")
        elif [[ "$ch01h" == -* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/-/$dwH/g")
        fi
    elif [[ $(($_01h)) -ge $cN ]]; then
        if [[ "$ch01h" == +* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/+/$upN/g")
        elif [[ "$ch01h" == -* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/-/$dwN/g")
        fi
    else
        if [[ "$ch01h" == +* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/+/$upL/g")
        elif [[ "$ch01h" == -* ]]; then
            ch01h=$(echo "$ch01h" | sed "s/-/$dwL/g")
        fi
    fi
}

get_form_out() {
    multiline="$1"
    IFS=',' read -ra array <<< "$output"
    for name in "${array[@]}"; do
        foundline=$(echo "$multiline" | tail -n +13 | grep -Fiw "$name" | sed 's/│ //g')
        rank=$(echo "$foundline" | awk '{print $1}' | awk '{printf "'"$awkf_r"'", $1}')
        coin=$(echo "$foundline" | awk '{print $2}')
        price=$(echo "$foundline" | awk '{print $3}' | awk '{printf "'"$awkf_p"'", $1}')
        ch24h=$(echo "$foundline" | awk '{gsub("%",""); print $4}' | sed 's/[.].*$//')
        ch01h=$(echo "$foundline" | awk '{gsub("%",""); print $5}' | sed 's/[.].*$//')
        mcap=$(echo "$foundline" | awk '{print $6}')
        mcap=$(echo "${mcap:0:$((${#mcap}-1))} ${mcap: -1}" | awk '{printf("'"$awkf_m"'%1s", $1, $2)}')
        spark=$(echo "$foundline" | awk '{print $7}')

        # if not contains '-' -> add '+'
        [[ "$ch24h" != -* ]] && ch24h='+'"$ch24h"
        [[ "$ch01h" != -* ]] && ch01h='+'"$ch01h"
        ch24h=$(echo "$ch24h" | awk '{printf "'"$awkf_h"'%", $1}')
        ch01h=$(echo "$ch01h" | awk '{printf "'"$awkf_h"'%", $1}')

        if [ $Ec -eq 1 ]; then
            colored_change_emojis "$ch01h" "$ch24h"
        fi

        frmt="$format"
        [[ "$format" =~ "%r" ]] && frmt=$(echo "$frmt" | sed -E 's/%r/'"$rank"'/g')
        [[ "$format" =~ "%c" ]] && frmt=$(echo "$frmt" | sed -E 's/%c/'"$coin"'/g')
        [[ "$format" =~ "%p" ]] && frmt=$(echo "$frmt" | sed -E 's/%p/'"$price"'/g')
        [[ "$format" =~ "%H" ]] && frmt=$(echo "$frmt" | sed -E 's/%H/'"$ch24h"'/g')
        [[ "$format" =~ "%h" ]] && frmt=$(echo "$frmt" | sed -E 's/%h/'"$ch01h"'/g')
        [[ "$format" =~ "%m" ]] && frmt=$(echo "$frmt" | sed -E 's/%m/'"$mcap"'/g')
        [[ "$format" =~ "%s" ]] && frmt=$(echo "$frmt" | sed -E 's/%s/'"$spark"'/g')
        out+="$frmt""$delimiter"
    done
    echo -e "$out"
}

get_date() {
    if [ -f "$CACHE" ]; then
        TABLE=$(cat "$CACHE")
        tempd=$(tail -n 1 "$CACHE" | sed 's/ UTC//' | sed 's/'$(echo "[\033]\[37m[\033]\[2m")'//' | sed 's/'$(echo "[\033]\[0m")'//')
        date=$(date --date="$tempd" +%s --utc)
        dateadd=$(echo "$date+300" | bc) # add N to date
        difference=$(echo "$dateadd-($(date +%s --utc))+1" | bc)
        if [[ $difference -gt 0 ]]; then
            if [[ $difference -lt 10 ]]; then
                [ $debug -eq 1 ] && notify-send "rate - sleep to sync:" "$difference sec"
                sleep $difference
            elif [[ $difference -lt 299 ]]; then
                [ $debug -eq 1 ] && notify-send "rate - sync difference:" "$difference sec"
            fi
        fi
    else
        echo -e "$CACHE\nDoes not exist, or not regular file -> exit."
        exit 1
    fi
}

get_n_lines() {
    multiline="$1"
    sumn=$(echo "11+$n*2" | bc)
    head=$(echo "$multiline" | head -n "$sumn")
    time="$(date --date=@"$date" +%R):loc. $(date --date=@"$date" +%R --utc):UTC"
    boxb=$(echo "$multiline" | grep -F '┌─' | tr '┌' '└' | tr '┬' '┴' | tr '┐' '┘')
    tail=$(echo "$multiline" | tail -n 1)
    echo -e "$head""\n$boxb""\n$time""\n$tail"
}

do_curl() {
    url="$1"
    TABLE=$(curl -sf "$url")
}

upd_cache() {
    url="$1"
    # if date now > cached date + N -> curl and upd cache
    if [[ $(date +%s --utc) -gt $dateadd && $color -eq 0 ]]; then
        do_curl "$url"
        # if last line is date UTC -> upd cache
        if [[ $(echo "$TABLE" | tail -n 1) =~ [0-9]{4}(.[0-9][0-9]){5}.[0-9]+.UTC ]]; then
            echo "$TABLE" > "$CACHE"
        else
            [ $debug -eq 1 ] && notify-send "last line of TABLE not date UTC"
        fi
        get_date
        [ $debug -eq 1 ] && notify-send "rate srv sync:" "$(date --date=@"$date" +%R):last $(date +%R):now"
    fi
}

main() {
    parse_in "$@"
    get_defaults
    BASE='https://'"$exchange"'.rate.sx/'"$special"
    URL="$BASE?qF$T&n=$num"
    [[ $test ]] && echo "$URL" && exit 0
    get_date
    upd_cache "$URL"

    # main
    if [[ $output ]]; then
        get_form_out "$TABLE"
    elif [[ $n && $color -eq 0 ]]; then
        get_n_lines "$TABLE"
    else
        do_curl "$URL"
        echo "$TABLE"
    fi
}

main "$@"

