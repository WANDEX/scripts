#!/bin/sh
# get average crypto exchange rate for last ~5 min

CACHE="$CSCRDIR"'/rate'

# read into variable using 'Here Document' code block
read -d '' USAGE <<- EOF
Usage: $(basename $BASH_SOURCE) [OPTION...]
GENERAL OPTIONS
    -c, --convert   Convert and get sum of currencies, separated by (+/-) each
    -e, --exchange  Change exchange currency (default: usd)
    -n, --number    Number of currencies in a spreadsheet (default: 10)
    -T, --text      Text only, no ANSI sequences
    -t, --test      Activate url preview test mode
OUTPUT ONLY OPTIONS
    -a, --awkformat Format fields (awk printf feature)
    -d, --delimiter Delimiter to use between coins (man echo -e sequences sup.)
    -f, --format    Format of output:
        %r rank | %c coin | %p price | %H ch24h | %h ch01h | %m mcap | %s spark
    -o, --output    Get multiple coins data separated via ',' as a delimiter
HELP
    -h, --help      Display help
    -H, --help-full Display full help which obtained via curl
    --currencies    List of supported currencies with their full names
    --coins         List of supported cryptocurrencies with their full names
EXAMPLES
    $(basename $BASH_SOURCE) -c 1337usd -e eur
    $(basename $BASH_SOURCE) -c 1BTC-10ETH+100LTC
    $(basename $BASH_SOURCE) -o btc,eth,bch -f "%c:%p[%H]" -d '\\\n' -a '%8.3f'
EOF

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=a:c:d:e:f:hHn:o:tT
    LONG=awkformat:,convert:,coins,currencies,delimiter:,exchange:,format:,help,help-full,number:,output:,test,text
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    exchange="usd"
    awkformat="%3.1f"
    format="%c:%p"
    delimiter=" "
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -a|--awkformat)
            shift
            awkformat="$1"
            ;;
        -c|--convert)
            shift
            special="$1"
            ;;
        -d|--delimiter)
            shift
            delimiter="$1"
            ;;
        -e|--exchange)
            shift
            exchange="$1"
            ;;
        -f|--format)
            shift
            format="$1"
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -H|--help-full)
            echo "$USAGE"
            echo "THE FOLLOWING IS OBTAINED USING CURL (EVERY TIME)"
            special=":help"
            ;;
        -n|--number)
            shift
            case $1 in
                0*)
                    printf "$1\n^ unsupported number! exit.\n"
                    exit 1
                    ;;
                ''|*[!0-9]*)
                    printf "$1\n^ IS NOT A NUMBER OF INT! exit.\n"
                    exit 1
                    ;;
                *) n=$1 ;;
            esac
            ;;
        -o|--output)
            shift
            output="$1"
            ;;
        -t|--test)
            test=1
            ;;
        -T|--text)
            T='T'
            ;;
        --coins)
            special=":coins"
            ;;
        --currencies)
            special=":currencies"
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

get_opt "$@"

get_defaults() {
    # essential defaults in order to work
    num=1000 # to get n coins from table to parse
    T='T'    # text only, no ANSI sequences
}

}

get_form_out() {
    multiline="$1"
    IFS=',' read -ra array <<< "$output"
    for name in "${array[@]}"; do
        foundline=$(echo "$multiline" | tail -n +13 | grep -Fiw "$name" | sed 's/│ //g')
        rank=$(echo "$foundline" | awk '{print $1}')
        coin=$(echo "$foundline" | awk '{print $2}')
        price=$(echo "$foundline" | awk '{print $3}' | awk '{printf "'"$awkformat"'", $1}')
        ch24h=$(echo "$foundline" | awk '{print $4}')
        ch01h=$(echo "$foundline" | awk '{print $5}')
        mcap=$(echo "$foundline" | awk '{print $6}')
        spark=$(echo "$foundline" | awk '{print $7}')

        frmt="$format"
        [[ "$format" =~ "%r" ]] && frmt=$(echo "$frmt" | sed -E 's/%r/'"$rank"'/g')
        [[ "$format" =~ "%c" ]] && frmt=$(echo "$frmt" | sed -E 's/%c/'"$coin"'/g')
        [[ "$format" =~ "%p" ]] && frmt=$(echo "$frmt" | sed -E 's/%p/'"$price"'/g')
        [[ "$format" =~ "%H" ]] && frmt=$(echo "$frmt" | sed -E 's/%H/'"$ch24h"'/g')
        [[ "$format" =~ "%h" ]] && frmt=$(echo "$frmt" | sed -E 's/%h/'"$ch01h"'/g')
        [[ "$format" =~ "%m" ]] && frmt=$(echo "$frmt" | sed -E 's/%m/'"$mcap"'/g')
        [[ "$format" =~ "%s" ]] && frmt=$(echo "$frmt" | sed -E 's/%s/'"$spark"'/g')
        out+="$frmt""$delimiter"
    done
    echo -e "$out"
}


get_date() {
    if [ -f "$CACHE" ]; then
        TABLE=$(cat "$CACHE")
        date=$(date -d "$(tail -n 1 "$CACHE" | sed 's/ UTC//' | sed 's/'$(echo "[\033]\[37m[\033]\[2m")'//' | sed 's/'$(echo "[\033]\[0m")'//')" +%s --utc)
        dateadd=$(echo "$date+305" | bc) # add N to date
    fi
}

get_n_lines() {
    multiline="$1"
    sumn=$(echo "11+$n*2" | bc)
    head=$(echo "$multiline" | head -n "$sumn")
    time="$(date --date="@$date" +%R):loc. $(date --date="@$date" +%R --utc):UTC"
    tail=$(echo "$multiline" | tail -n 1)
    boxb=$(echo "└──────┴─────────┴─────────────┴───────────────┴───────────────┴──────────────────┴──────────────┘")
    echo -e "$head""\n$boxb""\n$time""\n$tail"
}

do_curl() {
    url="$1"
    TABLE=$(curl -sf "$url")
}

upd_cache() {
    url="$1"
    # if date now > cached date + N -> curl and upd cache
    if [[ $(date +%s --utc) -gt $dateadd ]]; then
        do_curl "$url"
        echo "$TABLE" > "$CACHE"
        get_date
        notify-send "rate srv sync:" "$(date --date="@$date" +%R):last $(date +%R):now"
    fi
}

get_defaults
BASE='https://'"$exchange"'.rate.sx/'"$special"
URL="$BASE?qF$T&n=$num"
[[ $test ]] && echo "$URL" && exit 0
get_date
upd_cache "$URL"

# main
if [[ $output ]]; then
    get_form_out "$TABLE"
elif [[ $n ]]; then
    get_n_lines "$TABLE"
else
    do_curl "$URL"
    echo "$TABLE"
fi

