#!/bin/sh
# module that gets top N cryptocurrencies by highest change of colnum, and shows
# data for each, scrolling them automatically with N sleep time between each.

RATE_FORM="$CSCRDIR"'/rate/rate_form'

# read into variable using 'Here Document' code block
read -d '' USAGE <<- EOF
Usage: $(basename $BASH_SOURCE) [OPTION...]
OPTIONS
    -e, --exclude       Comma separated list of the column names to exclude:
                        'c,p,H,h,m,r' - full list of awailable column names
    -h, --help          Display help
    -s, --slp           Sleep time between printing coin data
    --bar               Execution in infinite loop
    --debug             Debug mode -> echo about next inf loop iteration
EOF

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=ac:de:hn:p:s:
    LONG=ascending,bar,bot:,colnum:,debug,descending,exclude:,help,number:,prefix:,slp:,top:
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    def_columns="c,p,H,h,m,r" # list of column names
    del_columns="p,m,r"       # list of columns to delete
    num=10
    num_total=$(cat "$RATE_FORM" | wc -l)
    prefix=""
    slp=3 # sleep time between printing lines
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -a|--ascending)
            ascending=1
            ;;
        -c|--colnum)
            shift
            case $1 in
                0*)
                    printf "$1\n^ unsupported number! exit.\n"
                    exit 1
                    ;;
                ''|*[!0-9]*)
                    printf "$1\n^ IS NOT A NUMBER OF INT! exit.\n"
                    exit 1
                    ;;
                *) colnum=$1 ;;
            esac
            ;;
        -d|--descending)
            descending=1
            ;;
        -e|--exclude)
            shift
            del_columns="$1"
            ;;
        -h|--help)
            echo "$USAGE"
            rate_sort --help | sed "s/OPTIONS/RATE_SORT OPTIONS/;
                                    /Usage:/d; /--help/d; /--debug/d;"
            exit 0
            ;;
        -n|--number)
            shift
            case $1 in
                0*)
                    printf "$1\n^ unsupported number! exit.\n"
                    exit 1
                    ;;
                ''|*[!0-9]*)
                    printf "$1\n^ IS NOT A NUMBER OF INT! exit.\n"
                    exit 1
                    ;;
                *) num=$1 ;;
            esac
            [ $num -gt $num_total ] && num=$num_total
            ;;
        -p|--prefix)
            shift
            prefix="$1"
            ;;
        -s|--slp)
            shift
            slp=$1
            ;;
        --bar)
            bar=1
            ;;
        --bot)
            shift
            bot=(--bot $1)
            ;;
        --debug)
            debug=1
            ;;
        --top)
            shift
            top=(--top $1)
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

sort_list() {
    if [ -z "$colnum" ]; then
        echo "the column number is required for sorting by ... exit."
        exit 1
    fi
    if [[ $ascending -eq 1 ]]; then
        ad=(-a)
    elif [[ $descending -eq 1 ]]; then
        ad=(-d)
    else
        # descending order by default
        ad=(-d)
    fi
}

core() {
    MULTILINE="$1"
    # hide unspecified columns
    MULTILINE=$(echo "$MULTILINE" | column -t -dN "$def_columns" -H "$del_columns")
    MAXLWIDTH=$(echo "$MULTILINE" | wc --max-line-length)
    CENSOR=$(printf %"$MAXLWIDTH"s | tr " " "X") # print X till max line length
    while read line; do # line by line loop
        # delete/replace previous line and use $MAXLWIDTH string format
        printf '%s\r\033[K%s%'"$MAXLWIDTH"'s' "$CENSOR" "$prefix" "$line"
        sleep $slp
    done <<< "$MULTILINE"
}

main() {
    get_opt "$@"
    sort_list
    RS=$(rate_sort -c $colnum -n $num ${top[@]} ${bot[@]} ${ad[@]})

    if [[ $bar -eq 1 ]]; then
        while true; do # infinite loop!
            core "$RS"
            [[ $debug -eq 1 ]] && printf " -> next inf loop iteration"
            sleep $slp
        done
    else
        core "$RS"
    fi
}

main "$@"

