#!/bin/sh
# module that gets top N cryptocurrencies by highest change of colnum, and shows
# data for each, scrolling them automatically with N sleep time between each.

RATE_FORM="$CSCRDIR"'/rate/rate_form'

# read into variable using 'Here Document' code block
read -d '' USAGE <<- EOF
Usage: $(basename $BASH_SOURCE) [OPTION...]
OPTIONS
    -e, --exclude       Comma separated list of the column names to exclude:
                        'c,p,H,h,m,r' - full list of awailable column names
    -h, --help          Display help
    -l, --line-number   Add to output current line number (as rating)
    -p, --prefix        Prefix message before the data
    -s, --slp           Sleep time between printing coin data
    --bar               Special oneshot mode without loop, but with temp file
    --inf               Execution in infinite loop
    --debug             Debug mode -> echo INFO messages
EOF

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=ac:de:hln:p:s:
    LONG=ascending,bar,bot:,colnum:,debug,descending,exclude:,help,line-number,inf,number:,prefix:,slp:,top:
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    bar=0
    inf=0
    def_columns="c,p,H,h,m,r" # list of column names
    del_columns="p,m,r"       # list of columns to delete
    cln=0
    num=10
    num_total=$(cat "$RATE_FORM" | wc -l)
    prefix=""
    slp=3 # sleep time between printing lines
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -a|--ascending)
            ascending=1
            ;;
        -c|--colnum)
            shift
            case $1 in
                0*)
                    printf "$1\n^ unsupported number! exit.\n"
                    exit 1
                    ;;
                ''|*[!0-9]*)
                    printf "$1\n^ IS NOT A NUMBER OF INT! exit.\n"
                    exit 1
                    ;;
                *) colnum=$1 ;;
            esac
            ;;
        -d|--descending)
            descending=1
            ;;
        -e|--exclude)
            shift
            del_columns="$1"
            ;;
        -h|--help)
            echo "$USAGE"
            rate_sort --help | sed "s/OPTIONS/RATE_SORT OPTIONS/;
                                    /Usage:/d; /--help/d; /--debug/d;"
            exit 0
            ;;
        -l|--line-number)
            cln=1
            ;;
        -n|--number)
            shift
            case $1 in
                0*)
                    printf "$1\n^ unsupported number! exit.\n"
                    exit 1
                    ;;
                ''|*[!0-9]*)
                    printf "$1\n^ IS NOT A NUMBER OF INT! exit.\n"
                    exit 1
                    ;;
                *) num=$1 ;;
            esac
            [ $num -gt $num_total ] && num=$num_total
            ;;
        -p|--prefix)
            shift
            prefix="$1"
            ;;
        -s|--slp)
            shift
            slp=$1
            ;;
        --bar)
            bar=1
            ;;
        --bot)
            shift
            bot=(--bot $1)
            ;;
        --debug)
            debug=1
            ;;
        --inf)
            inf=1
            ;;
        --top)
            shift
            top=(--top $1)
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

sort_list() {
    if [ -z "$colnum" ]; then
        echo "the column number is required for sorting by ... exit."
        exit 1
    fi
    if [[ $ascending -eq 1 ]]; then
        ad=(-a)
    elif [[ $descending -eq 1 ]]; then
        ad=(-d)
    else
        # descending order by default
        ad=(-d)
    fi
}

hide_columns() {
    # hide unspecified columns
    echo "$1" | column -t -dN "$def_columns" -H "$del_columns"
}

bar() {
    CMD=($@) # not executes here! only array of raw arguments!
    tmpd="${TMPDIR:-/tmp/}$(basename $0)" && mkdir -p "$tmpd"
    # OPTIONS as simple string without spaces
    sopt=$(echo "$OPTIONS" | sed "s/[ ][-]*/_/g; s/[']//g; s/_$//g; s/\///g; s/\\\//g;")
    ufile="$tmpd/$(basename $0)$sopt"
    # if mtime of RATE_FORM > ufile or ufile does not exist
    if [ ! -f "$ufile" ] || [[ $(date -r $RATE_FORM +%s) -gt $(date -r $ufile +%s) ]]; then
        MULTILINE=$(${CMD[@]}) # executes here!
        MULTILINE=$(hide_columns "$MULTILINE")
        NUM_LINES=$(echo "$MULTILINE" | wc -l)
        LINE_ENDS=$(seq $NUM_LINES | sed "c |") # gen line ends for each line
        echo "$MULTILINE" > "$ufile" # paste requires file -> only one input
        # glue input to file and make all columns even width, especially for the last columns!
        GLUE_ENDS=$(echo "$LINE_ENDS" | paste -d' ' "$ufile" - | column -to' ')
        echo "$GLUE_ENDS" | sed '1s/^/>/' > "$ufile" # insert at beginning of first line
    elif [ -f "$ufile" ]; then
        ltotal=$(cat "$ufile" | wc -l) # total num of lines
        lnum=$(sed -n '/>/=' "$ufile") # get line number with > char
        sed -i $lnum's/^>//' "$ufile"  # rm > on current line
        if [[ $ltotal -eq $lnum ]]; then
            nnum=1
        else
            nnum=$(($lnum+1))
        fi
        sed -i $nnum's/^/>/' "$ufile" # add > on next line
    else
        [[ $debug -eq 1 ]] && printf "SOMETHING WENT WRONG!"
        notify-send -u critical "$(basename $0)" "ERROR INSIDE BAR MODE!"
        exit 1
    fi
    out=$(grep "^>" "$ufile" | sed "s/^>//; s/|$//;")
    if [ "$cln" -eq 1 ]; then
        ln=$(sed -n '/^>/=' "$ufile")
        ln=$(printf "%02d)" "$ln")
    fi
    printf "%s%s%s" "$prefix" "$ln" "$out"
}

term() {
    MULTILINE="$1"
    MULTILINE=$(hide_columns "$MULTILINE")
    MAXLWIDTH=$(echo "$MULTILINE" | wc --max-line-length)
    CENSOR=$(printf %"$MAXLWIDTH"s | tr " " "X") # print X till max line length
    TRM="\r\033[K"
    CR=""
    while read line; do # line by line loop
        if [ "$cln" -eq 1 ]; then
            ln=$(echo "$MULTILINE" | sed -n "/$line/=")
            ln=$(printf "%02d)" "$ln")
        fi
        # delete/replace previous line and use $MAXLWIDTH string format
        printf "%s$TRM%s%s%""$MAXLWIDTH"'s'"$CR" "$CENSOR" "$prefix" "$ln" "$line"
        sleep $slp
    done <<< "$MULTILINE"
}

main() {
    get_opt "$@"
    sort_list
    # not executes here! only array of raw arguments!
    CMD=(rate_sort -c $colnum -n $num ${top[@]} ${bot[@]} ${ad[@]})
    if [[ $bar -eq 1 ]]; then
        bar "${CMD[@]}"
    elif [[ $inf -eq 1 ]]; then
        while true; do # infinite loop!
            RS=$(${CMD[@]})
            OLD_MTIME=$(date -r $RATE_FORM)
            [[ $debug -eq 1 ]] && printf " -> fetched NEW DATA!\n"
            sleep $slp
            # loop till update of the file modification time
            while [[ $OLD_MTIME == $(date -r $RATE_FORM) ]]; do
                term "$RS"
                [[ $debug -eq 1 ]] && printf " -> next inf loop iteration"
                sleep $slp
            done
        done
    elif [[ $inf -eq 0 ]]; then
        RS=$(${CMD[@]})
        term "$RS"
    fi
}

main "$@"

