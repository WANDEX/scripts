#!/bin/sh
# rate script that shows data on each coin,
# scrolling them automatically with sleep time between each.

CSCRDIR="${CSCRDIR:-"$HOME/.cache/cscripts"}"
RATE_FORM="${CSCRDIR}/rate/rate_pre"
[ -f "$RATE_FORM" ] || exit 1 # silently exit if file does not exist
# shellcheck disable=SC2002 # this is not useless cat!
num_total=$(cat "$RATE_FORM" | wc -l)

OLDIFS="$IFS"
NL='
' # New Line

bname="$(basename "$0")"
USAGE=$(printf "%s" "\
Usage: $bname [OPTION...]
OPTIONS
    -e, --exclude       Comma separated list of the column names to exclude:
                        'r,c,p,H,h,m,k' - full list of available column names
    -h, --help          Display help
    -l, --line-number   Add to output current line number (as rank)
    -p, --prefix        Prefix message before the data
    -s, --slp           Sleep time between printing coin data
    --bar               Special oneshot mode without loop, but with temp file
    --inf               Execution in infinite loop
")

intv() {
    # exit if $1 is not a valid int value
    case "$1" in
        0*)
            printf "(%s)\n%s\n" "$1" "^ unsupported number! exit."
            exit 10
        ;;
        ''|*[!0-9]*)
            printf "(%s)\n%s\n" "$1" "^ is not a valid number of int! exit."
            exit 11
        ;;
    esac
}

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=ac:de:hln:p:Ps:
    LONG=ascending,bar,bot:,colnum:,descending,exclude:,help,line-number,inf,number:,prefix:,post,slp:,top:
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    bar=0
    inf=0
    def_columns="r,c,p,H,h,m,k" # list of column names
    del_columns="r,p,m,k"       # list of columns to delete
    cln=0
    num=10
    prefix=""
    ad="-d" # descending order by default
    slp=3 # sleep time between printing lines
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -a|--ascending)
            ad="-a"
            ;;
        -c|--colnum)
            shift
            intv "$1"
            colnum="$1"
            ;;
        -d|--descending)
            ad="-d"
            ;;
        -e|--exclude)
            shift
            del_columns="$1"
            ;;
        -h|--help)
            echo "$USAGE"
            rate_sort --help | sed "s/OPTIONS/rate_sort OPTIONS/; /Usage:/d; /--help/d;"
            exit 0
            ;;
        -l|--line-number)
            cln=1
            ;;
        -n|--number)
            shift
            intv "$1"
            num="$1"
            [ "$num" -gt "$num_total" ] && num="$num_total"
            ;;
        -p|--prefix)
            shift
            prefix="$1"
            ;;
        -P|--post)
            post='P'
            ;;
        -s|--slp)
            shift
            slp=$1
            ;;
        --bar)
            bar=1
            ;;
        --bot)
            shift
            bot="$1"
            ;;
        --inf)
            inf=1
            ;;
        --top)
            shift
            top="$1"
            ;;
        --)
            shift
            # check/set defaults after getting all options
            if [ -z "$colnum" ]; then
                echo "the column number is required for sorting by ... exit."
                exit 1
            fi
            # if top/bot not set explicitly
            [ -z "$top" ] && top="$num_total"
            [ -z "$bot" ] && bot="$num_total"
            break
            ;;
        esac
        shift
    done
}

get_opt "$@"

rate_sort_cmd() {
    rate_sort "${ad}${post}" -c "$colnum" -n "$num" --top "$top" --bot "$bot"
}

hide_columns() {
    # hide unspecified columns
    echo "$1" | column -t -dN "$def_columns" -H "$del_columns"
}

bar() {
    tmpd="${TMPDIR:-/tmp/}${bname}" && mkdir -p "$tmpd"
    # OPTIONS as simple string without spaces
    sopt=$(echo "$OPTIONS" | sed "s/[ ][-]*/_/g; s/[']//g; s/_$//g; s/\///g; s/\\\//g;")
    ufile="${tmpd}/${bname}${sopt}"
    drf="$(date +%s --utc -r "$RATE_FORM")"
    dru="$(date +%s --utc -r "$ufile")"
    # if mtime of RATE_FORM > ufile or ufile does not exist
    if [ ! -f "$ufile" ] || [ "$drf" -gt "$dru" ]; then
        MULTILINE=$(rate_sort_cmd)
        MULTILINE=$(hide_columns "$MULTILINE")
        NUM_LINES=$(echo "$MULTILINE" | wc -l)
        LINE_ENDS=$(seq "$NUM_LINES" | sed "c |") # gen line ends for each line
        echo "$MULTILINE" > "$ufile" # paste requires file -> only one input
        # glue input to file and make all columns even width, especially for the last columns!
        GLUE_ENDS=$(echo "$LINE_ENDS" | paste -d' ' "$ufile" - | column -to' ')
        echo "$GLUE_ENDS" | sed '1s/^/>/' > "$ufile" # insert at beginning of first line
    elif [ -f "$ufile" ]; then
        # shellcheck disable=SC2002 # this is not useless cat!
        ltotal=$(cat "$ufile" | wc -l) # total num of lines
        lnum=$(sed -n '/>/=' "$ufile") # get line number with > char
        sed -i "$lnum"'s/^>//' "$ufile"  # rm > on current line
        if [ "$ltotal" -eq "$lnum" ]; then
            nnum=1
        else
            nnum=$((lnum+1))
        fi
        sed -i $nnum's/^/>/' "$ufile" # add > on next line
    else
        notify-send -u critical "${bname}" "ERROR INSIDE BAR MODE!"
        exit 1
    fi
    out=$(grep "^>" "$ufile" | sed "s/^>//; s/|$//;")
    if [ "$cln" -eq 1 ]; then
        ln=$(sed -n '/^>/=' "$ufile")
        ln=$(printf "%02d)" "$ln")
    fi
    printf "%s%s%s" "$prefix" "$ln" "$out"
}

term() {
    MULTILINE=$(rate_sort_cmd)
    MULTILINE=$(hide_columns "$MULTILINE")
    IFS="$NL" # set Internal Field Separator to New Line
    for line in $MULTILINE; do
        if [ "$cln" -eq 1 ]; then
            ln=$(echo "$MULTILINE" | sed -n "/$line/=")
            ln=$(printf "%02d)" "$ln")
        fi
        printf "\r%s%s%s" "$prefix" "$ln" "$line"
        sleep "$slp"
    done
    IFS="$OLDIFS" # restore
}

main() {
    if [ "$bar" -eq 1 ]; then
        bar
    elif [ "$inf" -eq 0 ]; then
        term
    elif [ "$inf" -eq 1 ]; then
        while true; do
            term
        done
    fi
}

main
