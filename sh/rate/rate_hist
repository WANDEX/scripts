#!/bin/sh
# create json file with name 'datebuy_coinname', in interactive mode add all buy/sell data to file

XDGCHCS="${XDG_CACHE_HOME:-"$HOME/.cache"}/cscripts"
CACHEDIR="${CSCRDIR:-$XDGCHCS}/rate_hist"
[ ! -d "$CACHEDIR" ] && mkdir -p "$CACHEDIR"

if [ -t 0 ]; then
    fwid=$(xdotool getactivewindow) # get id of the active/focused terminal emulator window
    # FIXME right now is unused, as currently my st with alpha patch can't embed dmenu into it's window
    [ -n "$fwid" ] && fwidarr=( -w "$fwid" )
    # TODO create my own build of st with fresh alpha patch and test 'dmenu "${fwidarr[@]}"'
fi

# read into variable using 'Here Document' code block
read -d '' USAGE <<- EOF
Usage: $(basename $BASH_SOURCE) [OPTION...]
OPTIONS
    -b, --buy           Buy operation
    -D, --dmenu         Toggle use of dmenu interactive input mode
    -i, --interactive   Toggle interactive mode on/off
    -h, --help          Display help
    -s, --sell          Sell operation
INPUT MODE OPTIONS
    -c, --coin          Coin name
    -C, --currency      Currency name of price:
    -d, --date          Date of operation
    -f, --fee           Fee of coin buy/sell
    -F, --filled        Filled amount of coin
    -p, --price         Price of coin
    -t, --total         Total in currency
EOF

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=bc:C:d:Df:F:ihp:st:
    LONG=buy,coin:,currency:,date:,dmenu,fee:,filled:,interactive,help,price:,sell,total:
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    interactive=1
    dmenu=1
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -b|--buy)
            operation=buy
            ;;
        -c|--coin)
            shift
            coin="$1"
            ;;
        -C|--currency)
            shift
            currency="$1"
            ;;
        -d|--date)
            shift
            date="$1"
            ;;
        -D|--dmenu)
            [ "$dmenu" -eq 1 ] && dmenu=0 || dmenu=1 # toggle behavior of value
            ;;
        -f|--fee)
            shift
            fee="$1"
            ;;
        -F|--filled)
            shift
            filled="$1"
            ;;
        -i|--interactive)
            [ "$interactive" -eq 1 ] && interactive=0 || interactive=1 # toggle behavior of value
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -p|--price)
            shift
            price="$1"
            ;;
        -s|--sell)
            operation=sell
            ;;
        -t|--total)
            shift
            total="$1"
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

get_opt "$@"

questions() {
    qcoin="Coin name of buy/sell: "
    qprice="Price of single asset: "
    qcurrency="Currency name of price: "
    qfilled="Filled: "
    qfee="Fee: "
    qtotal="Total in currency: "
    qdate="Date of operation: "
}

questions

ask_buy_or_sell() {
    q_operation="Buy or Sell operation to use? (B/s): "
    if [ -z "$operation" ]; then
        if [ "$dmenu" -eq 1 ]; then
            operation=$(printf "%s\n%s\n" "buy" "sell" | dmenu -i -n -p "$q_operation")
            case "$operation" in
                [Bb]uy)  operation=buy  ;;
                [Ss]ell) operation=sell ;;
            esac
        else
            while true; do
                read -r -n 1 -p "$q_operation" operation
                case "$operation" in
                    [Bb]) operation=buy;  break ;;
                    [Ss]) operation=sell; break ;;
                    *) printf "\n%s\n" "I don't get it." ;;
                esac
            done
        fi
    fi
}

data_recheck() {
    printf "%s\n" "$1" # print empty line or line with arg
    printf "%24s %s\n" "$qcoin"     "$coin"
    printf "%24s %s\n" "$qprice"    "$price"
    printf "%24s %s\n" "$qcurrency" "$currency"
    printf "%24s %s\n" "$qfilled"   "$filled"
    printf "%24s %s\n" "$qfee"      "$fee"
    printf "%24s %s\n" "$qtotal"    "$total"
    printf "%24s %s\n" "$qdate"     "$date"
}

check_variables() {
    # check if all required values are provided with options
    empty=""
    [ -z "$operation" ] && empty="$empty o" && printf "%s : %s\n" "[o] empty" "operation"
    [ -z "$coin"      ] && empty="$empty c" && printf "%s : %s\n" "[c] empty" "coin"
    [ -z "$price"     ] && empty="$empty,p" && printf "%s : %s\n" "[p] empty" "price"
    [ -z "$currency"  ] && empty="$empty,C" && printf "%s : %s\n" "[C] empty" "currency"
    [ -z "$filled"    ] && empty="$empty,F" && printf "%s : %s\n" "[F] empty" "filled"
    [ -z "$fee"       ] && empty="$empty,f" && printf "%s : %s\n" "[f] empty" "fee"
    [ -z "$total"     ] && empty="$empty,t" && printf "%s : %s\n" "[t] empty" "total"
    [ -z "$date"      ] && empty="$empty,d" && printf "%s : %s\n" "[d] empty" "date"
    if [ -n "$empty" ] && [ $interactive -eq 0 ]; then
        # in non interactive mode, print which option is empty and just exit
        printf "%s %s\n" "exit because of:" "$empty"
        exit 1
    fi
}

update_variable() {
    # guess variable by substring
    # replace old value with new
    line="$1"
    value="$2"
    case "$line" in
        *"$qcoin"*) coin="$value";;
        *"$qprice"*) price="$value";;
        *"$qcurrency"*) currency="$value";;
        *"$qfilled"*) filled="$value";;
        *"$qfee"*) fee="$value";;
        *"$qtotal"*) total="$value";;
        *"$qdate"*) date="$value";;
    esac
}

dmenu_ask_input_data() {
    # OK field becomes available only if all required fields are not empty
    # if OK line selected -> all good, else -> edit variable selected by line
    ok_msg="OK | save as json and exit."
    while true; do
        empty_fields=$(check_variables)
        [ -z "$empty_fields" ] && ok="$ok_msg"
        selection=$(data_recheck "$ok" | dmenu -l 10 -i -p "OK | edit variable selected by line:")
        case "$selection" in
            [Ee]xit|[Cc]lose) exit 0 ;;
            "$ok_msg") break ;;
            ""|" ") edit=0; ok="" continue ;; # ESC is pressed -> simply go on next loop iteration
            *) edit=1 ;;
        esac
        if [ "$edit" -eq 1 ]; then
            # set new variable value
            new_value=$(echo "" | dmenu -p "set new value of ($selection):")
            update_variable "$selection" "$new_value"
            # data_recheck will print with new value on next loop iteration
        fi
    done
}

term_ask_input_data() {
    [ -z "$coin"     ] && read -r -p "$qcoin"     coin
    [ -z "$price"    ] && read -r -p "$qprice"    price
    [ -z "$currency" ] && read -r -p "$qcurrency" currency
    [ -z "$filled"   ] && read -r -p "$qfilled"   filled
    [ -z "$fee"      ] && read -r -p "$qfee"      fee
    [ -z "$total"    ] && read -r -p "$qtotal"    total
    [ -z "$date"     ] && read -r -p "$qdate"     date
}

update_json_variables() {
read -rd '' RAWJSON <<- EOF
{
    "operation": "$operation",
    "coin"     : "$coin",
    "price"    : "$price",
    "currency" : "$currency",
    "filled"   : "$filled",
    "fee"      : "$fee",
    "total"    : "$total",
    "date"     : "$date"
}
EOF
}

save_as_json() {
    # convert RAWJSON 'Here Document' code block to json,
    # generate filename of format, and save as json file.
    # example: 2021-03-03_10:50:00[sell:BNB|USDT].json
    strdate=$(echo "$date" | sed "s/[ ]\+/_/g") # replace spaces in date
    filename="$strdate"'['"$operation:$coin|$currency"'].json'
    filepath="$CACHEDIR/$filename"
    json=$(echo "$RAWJSON" | jq .)
    echo "$json" > "$filepath"
    fcontent=$(cat "$filepath")
    if [ -f "$filepath" ]; then
        notify-send -u normal "[rate_hist] saved in:" "\n$filename\n$fcontent\n"
    else
        notify-send -u critical "[rate_hist] ERROR file not saved:" "\n$filename\n"
    fi
}

if [ $interactive -eq 1 ]; then
    if [ "$dmenu" -eq 1 ]; then
        # dmenu input mode
        ask_buy_or_sell
        dmenu_ask_input_data
        update_json_variables
        save_as_json
    else
        # terminal emulator input mode
        ask_buy_or_sell
        term_ask_input_data
        update_json_variables
        data_recheck
        read -r -n 1 -p "All input is right? (Y/n): " confirm
        case "$confirm" in
            [YyEeSs]) printf "\n\n"  ;; # insert new lines after confirm prompt
            [NnOo])   echo && exit 1 ;;
        esac
        save_as_json
    fi
else
    echo "Non interactive mode"
    check_variables
    save_as_json
fi
