#!/bin/sh
# rate script to get sorted by column N items length output

CSCRDIR="${CSCRDIR:-"$HOME/.cache/cscripts"}"
RATE_FORM="${CSCRDIR}/rate/rate_pre"
# RATE_FORM="${CSCRDIR}/rate/rate_post"
[ -f "$RATE_FORM" ] || exit 1 # silently exit if file does not exist

bname="$(basename "$0")"
USAGE=$(printf "%s" "\
Usage: $bname [OPTION...]
OPTIONS
    -a, --ascending     Sort list in a ascending manner
    -c, --colnum        Sort by: 1-rank 2-name 3-price 4-c24h 5-c01h 6-mcap
    -d, --descending    Sort list in a descending manner
    -h, --help          Display help
    -n, --number        Number of coins in list
    --bot               Get tail -n N before applying sort
    --top               Get head -n N before applying sort
EXAMPLE
    # make sort in range of ranks 11-20 (get 10 coins total)
    $bname -a -c3 -n20 --top 20 --bot 10
")

intv() {
    # exit if $1 is not a valid int value
    case "$1" in
        0*)
            printf "(%s)\n%s\n" "$1" "^ unsupported number! exit."
            exit 10
        ;;
        ''|*[!0-9]*)
            printf "(%s)\n%s\n" "$1" "^ is not a valid number of int! exit."
            exit 11
        ;;
    esac
}

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=ac:dhn:
    LONG=ascending,bot:,colnum:,descending,help,number:,top:
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    num=10
    sr="r" # descending order by default
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -a|--ascending)
            sr=""
            ;;
        -c|--colnum)
            shift
            intv "$1"
            colnum="$1"
            ;;
        -d|--descending)
            sr="r"
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -n|--number)
            shift
            intv "$1"
            num="$1"
            # shellcheck disable=SC2002 # this is not useless cat!
            num_total=$(cat "$RATE_FORM" | wc -l)
            [ "$num" -gt "$num_total" ] && num=$num_total
            ;;
        --bot)
            shift
            bot=$1
            ;;
        --top)
            shift
            top=$1
            ;;
        --)
            shift
            # check/set defaults after getting all options
            if [ -z "$colnum" ]; then
                echo "the column number is required for sorting by ... exit."
                exit 1
            fi
            break
            ;;
        esac
        shift
    done
}

get_opt "$@"

sort_cmd() {
    tmpd="${TMPDIR:-/tmp/}${bname}" && mkdir -p "$tmpd"
    tmpf=$(mktemp "$tmpd/XXXX")
    # check if variables defined
    if [ "$top" ] && [ "$bot" ]; then
        head -n "$top" "$RATE_FORM" | tail -n "$bot" > "$tmpf"
    elif [ "$top" ]; then
        head -n "$top" "$RATE_FORM" > "$tmpf"
    elif [ "$bot" ]; then
        tail -n "$bot" "$RATE_FORM" > "$tmpf"
    else
        cat "$RATE_FORM" > "$tmpf"
    fi
    case "$colnum" in
        1) sort "-k1bn${sr}" "$tmpf";;
        2) sort "-k2b${sr}" "$tmpf";;
        3) sort "-k3bn${sr}" "$tmpf";;
        4) sort "-k4bg${sr}" "-k5bg${sr}" "$tmpf";;
        5) sort "-k5bg${sr}" "-k4bg${sr}" "$tmpf";;
        6) # sort by market capitalization respecting [B]illion & [M]illion letters
            _pre_sort=$(sort "-k6bn${sr}" "$tmpf")
            _b=$(echo "$_pre_sort" | awk '{if (match($6, "B$")) print}')
            _m=$(echo "$_pre_sort" | awk '{if (match($6, "M$")) print}')
            if [ -z "$sr" ]; then
                sorted=$(printf "%s\n%s\n" "$_m" "$_b")
            else
                sorted=$(printf "%s\n%s\n" "$_b" "$_m")
            fi
            echo "$sorted"
            ;;
        *) echo "there is no such column with number:$colnum exit." && exit 1;;
    esac
    rm -f "$tmpf" # delete the temporary file, as it is no longer needed
}

main() {
    DATA="$(sort_cmd)"
    echo "$DATA" | head -n "$num"
}

main
