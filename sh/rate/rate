#!/bin/sh
# rate.sx wrapper written in POSIX sh
CSCRDIR="${CSCRDIR:-"$HOME/.cache/cscripts"}"
CACHE="${CSCRDIR}/rate/rate"
RATE_PRE="${CSCRDIR}/rate/rate_pre"
RATE_POST="${CSCRDIR}/rate/rate_post"
RATE_IGNORE="${CSCRDIR}/rate/rate_ignore"

OLDIFS="$IFS"
NL='
' # New Line

bname="$(basename "$0")"
USAGE=$(printf "%s" "\
Usage: $bname [OPTION...]
GENERAL OPTIONS
    -c, --convert   Convert and get sum of currencies, separated by (+/-) each
    -e, --exchange  Change exchange currency (default: usd)
    -k, --insecure  Use curl option (by default https is used without -k option)
    -n, --number    Number of currencies in a spreadsheet (default: 10)
    -t, --test      Activate url preview test mode
    -C, --color     Allow ANSI sequences for colored output, not only text data
OUTPUT ONLY OPTIONS
    -f, --format    Format of output:
        %r rank | %c coin | %p price | %H ch24h | %h ch01h | %m mcap
    printf format of fields:
        --Pr rank | --Pp price | --Ph change | --Pm mcap
    -o, --output    Get multiple coins data separated via ',' as a delimiter
        --Mp        Min decimal price string length to apply the decimal value format
HELP
    -h, --help      Display help
    -H, --help-full Display full help which obtained via curl
    --currencies    List of supported currencies with their full names
    --coins         List of supported cryptocurrencies with their full names
    --update        Update data (if all checks are passed) (intended for cron)
EXAMPLES
    $bname -c 1337usd -e eur
    $bname 1337usd to eur
    $bname 1337 usd in eur
    $bname -c 1BTC-10ETH+100LTC
    $bname 1BTC-10ETH+100LTC
    - Above examples are equally valid.
    $bname btc@1M in eur
    $bname -o btc,eth,bch -f '%c:%p\\t[%H]'
")

at_path() { hash "$1" >/dev/null 2>&1 ;} # if $1 is found at $PATH -> return 0

intv() {
    # exit if $1 is not a valid int value
    case "$1" in
        0*)
            printf "(%s)\n%s\n" "$1" "^ unsupported number! exit."
            exit 10
        ;;
        ''|*[!0-9]*)
            printf "(%s)\n%s\n" "$1" "^ is not a valid number of int! exit."
            exit 11
        ;;
    esac
}

trailing_args() {
    targs="${*}"
    targc="${#}"
    [ -z "$targs" ] && return
    case "$targs" in
        *" in "*|*" to "*)
            clean_targs=$(echo "$targs" | awk '{gsub(/ (in|to) /, " "); print}')
            if [ "$targc" -eq 4 ]; then
                special=$(echo "$clean_targs" | awk -F" " '{printf "%s%s", $1, $2}')
                exchange=$(echo "$clean_targs" | awk -F" " '{print $3}')
            elif [ "$targc" -eq 3 ]; then
                special=$(echo "$clean_targs" | awk -F" " '{printf "%s", $1}')
                exchange=$(echo "$clean_targs" | awk -F" " '{print $2}')
            else
                printf "(%s) unsupported num of args" "${targc}"
                exit 4
            fi
            # allow colored output for args like this:
            # btc@7d in eur
            color=1
            return
            ;;
    esac
    if [ "$targc" -eq 1 ]; then
        special="$targs"
        color=1 # allow colored output
        return
    fi
    printf "%s\n[%s]\n" "unsupported trailing arguments:" "$targs"
    exit 6
}

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=c:Ce:kf:hHn:o:t
    LONG=convert:,color,coins,currencies,exchange:,format:,help,insecure,help-full,Mp:,number:,output:,Ph:,Pm:,Pp:,Pr:,test,update
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    mplen=3 # min price string length for the decimal value format
    printf_r="%4s"
    printf_n="%8s"
    printf_p="%d"
    printf_P="%.2f"
    printf_p_mid="%.3f"
    printf_p_low="%.1e"
    printf_h="%+d" # add %% if you need % sign
    printf_m="%3d"
    exchange="usd"
    format="%c:%p"
    num=10      # get num coins by default
    num_max=600 # current max available coins
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -c|--convert)
            shift
            special="$1"
            ;;
        -C|--color)
            color=1
            ;;
        -e|--exchange)
            shift
            exchange="$1"
            ;;
        -k|--insecure)
            insecure="k"
            ;;
        -f|--format)
            shift
            format="$1"
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -H|--help-full)
            echo "$USAGE"
            echo "THE FOLLOWING IS OBTAINED USING CURL (EVERY TIME)"
            special=":help"
            ;;
        -n|--number)
            shift
            intv "$1"
            num="$1"
            [ "$num" -gt "$num_max" ] && num="$num_max"
            ;;
        -o|--output)
            shift
            output="$1"
            ;;
        -t|--test)
            test=1
            ;;
        --Ph)
            shift
            printf_h="$1"
            ;;
        --Pm)
            shift
            printf_m="$1"
            ;;
        --Pp)
            shift
            printf_p="$1"
            ;;
        --Pr)
            shift
            printf_r="$1"
            ;;
        --Mp)
            shift
            intv "$1"
            mplen="$1"
            ;;
        --coins)
            special=":coins"
            ;;
        --currencies)
            special=":currencies"
            ;;
        --update)
            update=1
            num="$num_max"
            ;;
        --)
            shift
            trailing_args "$@"
            [ -n "$color" ] || color=0
            if [ "$color" -eq 1 ]; then
                T=''  # colored output (ANSI sequences)
            else
                T='T' # text only (without ANSI sequences)
            fi
            break
            ;;
        esac
        shift
    done
}

get_opt "$@"

ignore_coins() {
    # ignore the names of the coins specified in the file each on a separate line
    if [ ! -r "$RATE_IGNORE" ]; then
        echo "$1"
        return
    fi
    icoins=$(cat "$RATE_IGNORE")
    if [ -z "$icoins" ]; then
        echo "$1"
        return
    fi
    # all above to do nothing -> return unchanged multiline string
    IFS="$NL"
    sdell=""
    # each coin_name on its own line
    for coin_name in $icoins; do
        # make one long sed delete lines command
        sdell="${sdell}/ ${coin_name} /d; "
    done
    IFS="$OLDIFS"
    # sed delete lines with coin names
    echo "$1" | sed "$sdell"
}

awk_format() {
    # make all formatting inside one awk script
    # rank,coin,price,ch24h,ch01h,mcap,spark
    echo "$1" | awk \
        -v printf_r="$printf_r" \
        -v printf_n="$printf_n" \
        -v printf_p="$printf_p" \
        -v printf_P="$printf_P" \
        -v printf_p_low="$printf_p_low" \
        -v printf_p_mid="$printf_p_mid" \
        -v printf_h="$printf_h" \
        -v printf_m="$printf_m" \
        -v mplen="$mplen" \
    '{
        printf printf_r, $1;
        printf "%-10s\t", "";

        printf printf_n, $2;
        printf "%-15s\t", "";

        # len of price value in decimal format;
        dlen=length(sprintf("%d", $3));
        if (dlen >= mplen)
            printf printf_p, $3;
        else if (dlen == mplen - 1)
            printf printf_P, $3;
        else if ($3 <= 0.0001)
            printf printf_p_low, $3;
        else
            printf printf_p_mid, $3;
        printf "%-15s\t", "";

        printf printf_h, $4;
        printf "%-15s\t", "";
        printf printf_h, $5;
        printf "%-15s\t", "";

        printf printf_m, $6;
        if (! match(printf_m, "%s")) {
            # add mcap letter(BM) after format if any
            if (match($6, "B$"))
                printf "B";
            else if (match($6, "M$"))
                printf "M";
        }

        printf "\n";
    }'
}

rate_process() {
    # clean & hide | bars as columns & spark column
    form_pre=$(tail -n +13 "$CACHE" | head -n -2 | sed '/├─/d' | column -t -H 1,3,5,7,9,11,13,14,15)
    form_pre=$(ignore_coins "$form_pre")
    echo "$form_pre" > "$RATE_PRE"
    # NOTE: column -t discards - printf 'right justify', but makes table compact
    form_post=$(awk_format "$form_pre" | column -t)
    echo "$form_post" > "$RATE_POST"
}

frmt_frmt() {
    [ -z "$frmt" ] && frmt="$format"
    case "$frmt" in
        *%[rcpHhms]*) ;;
        *) return ;;
    esac
    r=""; cn=""; f="%s"
    case "$1" in
        %r*) r="%r"; cn=1; f="$printf_r" ;;
        %c*) r="%c"; cn=2; f="$printf_n" ;;
        %p*) r="%p"; cn=3; f="%s" ;;
        %H*) r="%H"; cn=4; f="$printf_h" ;;
        %h*) r="%h"; cn=5; f="$printf_h" ;;
        %m*) r="%m"; cn=6; f="$printf_m" ;;
        *) return ;;
    esac
    [ -n "$r" ] || return
    frmt=$(echo "$frmt" | awk -vr="$r" -vt="$f" '{gsub(r,t); print $0}')
    # example result: ,$5,$4,$2,$3,$1,$6,$7
    column_order="${column_order},\$${cn}"
}

get_form_out() {
    # output data about specific coins with special data formatting
    frmt=""
    multiline=""
    IFS=','
    for coin_name in $output; do
        coin_line=""
        coin_line=$(grep -Fiw "$coin_name" "$RATE_PRE")
        multiline=$(printf "%s\n%s\n" "$multiline" "$coin_line")
    done
    # remove empty lines (first line always empty)
    multiline=$(echo "$multiline" | sed '/^[[:space:]]*$/d')
    formatted_multiline=$(awk_format "$multiline")
    IFS="%"
    column_order=""
    for replacement_arg in $format; do
        frmt_frmt "%${replacement_arg}"
    done
    IFS="$OLDIFS"
    echo "$formatted_multiline" | awk -v frmt="$frmt" '{printf frmt"\n"'"$column_order}"
}

get_n_first_coins() {
    tnuml=$(("11+$num*2"))
    tmain=$(head -n "$tnuml" "$CACHE")
    tbbot=$(grep -F '┌──────┬─' "$CACHE" | tr '┌' '└' | tr '┬' '┴' | tr '┐' '┘')
    tdate=$(tail -n1 "$CACHE")
    printf "%s\n%s\n%s\n" "$tmain" "$tbbot" "$tdate"
}

do_curl() { curl "-sf${insecure}" "$URL" ;}

upd_cache() {
    # these checks are crucial!
    [ "$update" ] || return
    [ "$color" -eq 0 ] || return
    if [ ! -f "$CACHE" ]; then
        do_curl > "$CACHE"
        rate_process
        return
    fi
    # validate date string in cache & that date string actually exist in cache file
    date_str_cache=$(tail -n1 "$CACHE")
    if date --date="${date_str_cache}" >/dev/null 2>&1; then # suppress output & errors
        date_in_cache=$(date --utc --date="${date_str_cache}" +%s)
    else
        notify-send -u critical -t 0 "[$bname]" "not valid date string in cache file.\n"
        return
    fi
    # add slightly more than default update time which is 5 min (300 sec)
    date_next_approx_upd=$(("$date_in_cache+333"))
    date_now=$(date --utc +%s)
    if [ "$date_now" -gt "$date_next_approx_upd" ]; then
        requested_data=$(do_curl)
        # get date from last line, in table on rate.sx it is usually UTC date
        date_str_request=$(echo "$requested_data" | tail -n1)
        # validate that last line of requested_data ends properly
        # before continuing to more complex checks
        case "$date_str_request" in
            *" UTC") ;;
            *) return ;;
        esac
        # validate date string in request
        if date --date="${date_str_request}" >/dev/null 2>&1; then # suppress output & errors
            date_in_request=$(date --utc --date="${date_str_request}" +%s)
        else
            notify-send -u critical -t 0 "[$bname]" "not valid date string in request.\n"
            return
        fi
        # NOTE: almost impossible, but just in case...
        # if date in cache is more recent than in request
        if [ "$date_in_cache" -gt "$date_in_request" ]; then
            if [ "$date_now" -lt "$date_in_request" ]; then
                notify-send -u critical -t 0 "[$bname] ALERT" "date now is behind the date in request!\n"
            else
                notify-send -u critical -t 0 "[$bname] ALERT" "date in cache is more recent than in request!\n"
            fi
            return
        fi
        # all checks are passed -> update cache with more recent data
        echo "$requested_data" > "$CACHE"
        rate_process
        # do not output anything and silently exit
        exit 0
    else
        # 3 - Early: It is too early for the update!
        exit 3
    fi
}

main() {
    base_url="https://${exchange}.rate.sx/${special}"
    URL="${base_url}?qF${T}&n=${num}"
    [ "$test" ] && echo "$URL" && exit 0
    upd_cache
    if [ "$output" ]; then
        get_form_out
    elif [ -z "$special" ] && [ "$color" -eq 0 ]; then
        get_n_first_coins
    else
        do_curl
    fi
}

main "$@"
