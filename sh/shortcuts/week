#!/bin/sh
# shortcut - to edit last/previous or current week pomodoro file by default
# also possible to calculate spent time on given slices and/or tasks

PMDRD="${PMDRD:-"$HOME/Documents/Pomodoro"}"

OLDIFS="$IFS"
# set variable to a new line, to use later as a value in Internal Field Separator
NLIFS='
'

case "$1" in
    -[0-9]*) file="$(date -d "$1" +'week-%V-%Y.txt')" ;; # (relative) example: -1week
    +*) # find week file by date example: +2021-07-20
        custom_date="$(echo "$1" | sed "s/^+//")";
        file="$(date -d "$custom_date" +'week-%V-%Y.txt')"
    ;;
    last|prev|l|p) file="$(date -d 'last week' +'week-%V-%Y.txt')" ;;
    c|cur|curr|current) file="$(date +'week-%V-%Y.txt')" ;;
    *) search_query="$1"; file="$(date +'week-%V-%Y.txt')" ;;
esac

find_week_file() {
    fpath=$(find "$PMDRD" -type f -name "$file")
    if [ ! -f "$fpath" ]; then
        printf "%s\n${RED}%s${END}\n" "$file" "FNF. exit."
        exit 1
    fi
}

find_all_week_files() {
    _fall="$(find "$PMDRD" -type f \( ! -iname "TODO*" \) -type f -printf '%P\n' | sort -V)"
    # exclude week files before $1 week file
    if [ -n "$1" ]; then
        if echo "$_fall" | grep -Fq "$1"; then
            _fall="$(echo "$_fall" | awk "/$1/{found=1} found")" # all lines after pattern incl.
        else
            # if exact week file not found -> find closest one after that week date
            # to do that: we append fake week file entry (not really exist!), then sort again
            _fake_week_file="$1"
            # FIXME: if week file in subdir -> sorting will be wrong! -> which result in wrong slice.
            _fall="$(printf "%s\n%s\n" "$_fall" "$_fake_week_file" | sort -V)"
            _fall="$(echo "$_fall" | awk "/$_fake_week_file/{found=1} found")" # all lines after pattern incl.
            echo "${RED_S}[WIP] (UNTESTED) YOU ENCOUNTERED RARE CASE${END}" >&2
            echo "${MAG}IF YOU SEE THIS -> MAKE SURE THAT OUTPUT IS EXACT FOR YOUR QUERY.${END}" >&2 # FIXME
        fi
    fi
    echo "$_fall"
}

grep_day() {
    find_week_file
    slice="$(grep -s "^$1" "$fpath")"
}

grep_query() {
    if [ -n "$slice" ] && [ -n "$search_query" ]; then
        slice="$(echo "$slice" | grep -F -s "$search_query")"
        [ -z "$slice" ] && echo "${YEL}NO SEARCH RESULTS FOUND. EXIT${END}" && exit 2
    elif [ -n "$search_query" ]; then
        if [ "$grep_all" ]; then
            files="$(find_all_week_files)"
        elif [ "$grep_year" ]; then
            _wf="$(date -d "last year +1week" "+week-%V-%Y.txt")"
            files="$(find_all_week_files "$_wf")"
        elif [ "$grep_month" ]; then
            _wf="$(date -d "last month +1week" "+week-%V-%Y.txt")"
            files="$(find_all_week_files "$_wf")"
        else
            find_week_file
            files="$fpath"
        fi
        files_in_one_line="$(echo "$files" | tr '\n' ' ')"
        cd "$PMDRD" || exit 1 # specifically before the cat!
        # shellcheck disable=SC2086 # (Double quote to prevent globbing and word splitting)
        MEGACAT="$(cat $files_in_one_line)" # all files split by space
        slice="$(echo "$MEGACAT" | grep -F -s "$search_query")"
        [ -z "$slice" ] && echo "${YEL}NO SEARCH RESULTS FOUND. EXIT${END}" && exit 2
    elif [ -z "$slice" ]; then
        find_week_file
        slice="$(cat "$fpath")"
    fi
}

if [ -n "$2" ]; then
    case "$2" in
        # grep for today, yesterday and any day, week name
        -[0-9]*)                        grep_day "$(date -d "$2" +%A)" ;; # (relative) example: -1day
        [Tt]oday)                       grep_day "$(date +%A)" ;;
        [Yy]esterday)                   grep_day "$(date --date=yesterday +%A)" ;;
        [Mm]o|[Mm]on|[Mm]onday)         grep_day "Monday"    ;;
        [Tt]u|[Tt]ue|[Tt]uesday)        grep_day "Tuesday"   ;;
        [Ww]e|[Ww]ed|[Ww]ednesday)      grep_day "Wednesday" ;;
        [Tt]h|[Tt]hu|[Tt]hursday)       grep_day "Thursday"  ;;
        [Ff]r|[Ff]ri|[Ff]riday)         grep_day "Friday"    ;;
        [Ss]a|[Ss]at|[Ss]aturday)       grep_day "Saturday"  ;;
        [Ss]u|[Ss]un|[Ss]unday)         grep_day "Sunday"    ;;
        [Aa]ll|[Hh]istory|[Oo]verall)   grep_all=1   ;; # over all history
        [Yy]ear)                        grep_year=1  ;;
        [Mm]onth)                       grep_month=1 ;;
        [Ww]eek)                        grep_week=1  ;; # full week
        [iI][Ww]eek)                    grep_iweek=1 ;; # full week by days individually
    esac
    grep_query
fi

hm_to_sec() { date --date="$1" +%s ;} # convert time to seconds
sec_diff() {
    # subtract and return difference in seconds
    _sec_diff="$(($1-$2))"
    echo "$_sec_diff"
}
sec_to_hm() { date --date="@$1" -u +%R ;} # convert seconds to HH:MM

sec_to_hm_inf() {
    # convert seconds into hours that bigger than 24h
    time_hh_mm="$(date --date="@$1" -u +"%-H:%M")" # hours without leading zeroes -> to sum later
    time_days="$(date --date="@$1" -u +"%-j")"
    time_days="$(("$time_days-1"))" # subtract 1 (because always starts from 1)
    if [ "$time_days" != "0" ]; then # because -gt 0 less stable
        hours="$(("$time_days*24"))" # convert days to hours
        time_hh="$(echo "$time_hh_mm" | cut -d: -f1)" # hours
        time_mm="$(echo "$time_hh_mm" | cut -d: -f2)" # minutes
        hh_sum="$(("$hours+$time_hh"))"
        time_hh_inf="${hh_sum}:${time_mm}"
        echo "$time_hh_inf"
    else
        echo "$time_hh_mm"
    fi

}

total_time_spent() {
    # example usage: total_time_spent "01:00 00:01"
    # returns: sum in seconds
    EPOCH='jan 1 1970'; sum=0
    for i in $1; do # 1 specifically without double quotes!
      sum="$(date -u -d "$EPOCH $i" +%s) + $sum"
    done
    echo "$sum" | bc
}

total_slice() {
    [ -z "$1" ] && return # simply return from function
    # returns: total time spent for slice $1 in 24h HH:MM
    spent_oneline="$(echo "$1" | awk '{print $3}' | tr '\n' ' ')"
    sec_total="$(total_time_spent "$spent_oneline")"
    sec_to_hm "$sec_total"
}

case "$3" in
    calc)
        hm="[[:digit:]][[:digit:]]:[[:digit:]][[:digit:]]"
        dgrep="$(echo "$slice" | grep -so "${hm}.*${hm}")"
        hm_pairs="$(echo "$dgrep" | sed -E "s/.?($hm).*($hm).?/\1-\2/")"
        IFS="$NLIFS"
        for line in $hm_pairs; do
            hm_fr="$(echo "$line" | cut -d- -f1)"
            hm_to="$(echo "$line" | cut -d- -f2)"
            sec_fr="$(hm_to_sec "$hm_fr")"
            sec_to="$(hm_to_sec "$hm_to")"
            seconds="$(sec_diff "$sec_to" "$sec_fr")"
            new="$(sec_to_hm "$seconds")"
            sleep 0.0001 # somehow fixes relatively rare calculation/replacement issue
            # printf "%s\t%s\t%s\n" "$line" "[$hm_fr-$hm_to]($seconds)" "{$new}" # only for debugging
            # replace the original time interval with the new calculated time spent
            slice="$(echo "$slice" | sed "s/${hm_fr}.*${hm_to}/${new}/")" # sometimes sed is unstable
            # slice="${slice/${hm_fr}.*${hm_to}/$new}" # slower than sed & not POSIX sh compliant
        done
        IFS="$OLDIFS" # restore
    ;;
    '') # if $3 empty, but $2 not
        if [ -n "$2" ]; then
            echo "$slice"
            exit 0
        fi
    ;;
esac

total_week() {
    s_mon="$(echo "$slice" | grep -s "^Monday")"
    s_tue="$(echo "$slice" | grep -s "^Tuesday")"
    s_wed="$(echo "$slice" | grep -s "^Wednesday")"
    s_thu="$(echo "$slice" | grep -s "^Thursday")"
    s_fri="$(echo "$slice" | grep -s "^Friday")"
    s_sat="$(echo "$slice" | grep -s "^Saturday")"
    s_sun="$(echo "$slice" | grep -s "^Sunday")"
    # calculate total time spent for each day of week individually
    t_mon="$(total_slice "$s_mon")"
    t_tue="$(total_slice "$s_tue")"
    t_wed="$(total_slice "$s_wed")"
    t_thu="$(total_slice "$s_thu")"
    t_fri="$(total_slice "$s_fri")"
    t_sat="$(total_slice "$s_sat")"
    t_sun="$(total_slice "$s_sun")"
    if [ "$grep_iweek" ]; then
        # print individual totals for each day of week
        [ -n "$t_mon" ] && echo "mon: $t_mon"
        [ -n "$t_tue" ] && echo "tue: $t_tue"
        [ -n "$t_wed" ] && echo "wed: $t_wed"
        [ -n "$t_thu" ] && echo "thu: $t_thu"
        [ -n "$t_fri" ] && echo "fri: $t_fri"
        [ -n "$t_sat" ] && echo "sat: $t_sat"
        [ -n "$t_sun" ] && echo "sun: $t_sun"
    else
        week_totals="${t_mon} ${t_tue} ${t_wed} ${t_thu} ${t_fri} ${t_sat} ${t_sun}"
        week_seconds="$(total_time_spent "$week_totals")"
        sec_to_hm_inf "$week_seconds"
    fi
}

total_search_query() {
    squery_spent_oneline="$(echo "$slice" | grep -so "$hm" | tr '\n' ' ')"
    squery_seconds="$(total_time_spent "$squery_spent_oneline")"
    sec_to_hm_inf "$squery_seconds"
}

if [ -n "$4" ]; then
    case "$4" in
        total)
            if [ -n "$search_query" ]; then
                # calculate total over search_query
                total="$(total_search_query)"
                echo "$total"
            elif [ "$grep_week" ] || [ "$grep_iweek" ]; then
                # calculate total time spent for selected (day or week)
                total="$(total_week)"
                echo "$total"
            else
                total="$(total_slice "$slice")"
                echo "$total"
            fi
        ;;
    esac
    exit 0
fi

if [ -n "$slice" ]; then
    echo "$slice"
    exit 0
fi

find_week_file
$EDITOR "$fpath"
